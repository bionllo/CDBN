% test cdbn
% -------------------------------------------
% This implementation is based on 'Unsupervised Learning of Hierarchical Representations
% with Convolutional Deep Belief Networks' by Honglak Lee. 
% -------------------------------------------
% By shaoguangcheng. From Xi'an, China
% Email : chengshaoguang1291@126.com

if ispc
    addpath('..\', '..\data', '..\util');
    dataPath = '..\data\mnistSmall';
end

if isunix
    addpath('../', '../data', '../util');
    dataPath = '../data/mnistSmall';
end

load(dataPath);
trainData = reshape(trainData', [28,28,10000]);
trainData = trainData(:,:,1);
dataSize1 = [28,28];
dataSize2 = [11,11]

arch1 = struct('dataSize', dataSize1, ...
        'nFeatureMapVis', 1, ...
		'nFeatureMapHid', 9, ...
        'kernelSize', [7 7], ...
        'poolingScale', [2 2], ...
        'inputType', 'binary');

arch1.opt = {'nEpoch', 1, ...
			 'learningRate', .05, ...
			 'displayInterval',10, ...
			 'sparsity', .02, ...
			 'lambda1', 5, ...
             'isUseGPU', 0};
         
arch2 = struct('dataSize', dataSize2, ...
        'nFeatureMapVis', 9, ...
		'nFeatureMapHid', 20, ...
        'kernelSize', [7 7], ...
        'poolingScale', [2 2], ...
        'inputType', 'binary');

arch2.opt = {'nEpoch', 1, ...
			 'learningRate', .05, ...
			 'displayInterval',10, ...
			 'sparsity', .02, ...
			 'lambda1', 5, ...
             'isUseGPU', 0};
m = cdbn([arch1, arch2]);
m = m.train(trainData);